// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-4

package main

import (
	"bytes"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func httpClientRequest(method, baseURL, path string, body *bytes.Buffer) (int, []byte, error) {
	client := &http.Client{}
	req, err := http.NewRequest(method, baseURL+path, body)
	if err != nil {
		return 0, nil, err
	}

	resp, err := client.Do(req)
	if err != nil {
		return 0, nil, err
	}
	defer resp.Body.Close()

	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0, nil, err
	}

	return resp.StatusCode, respBody, nil
}

func TestHttpClientRequest_dae1710fc2(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`OK`))
	}))
	defer ts.Close()

	status, body, err := httpClientRequest("GET", ts.URL, "/test", nil)
	if err != nil {
		t.Error(err)
	}

	if status != http.StatusOK {
		t.Errorf("Expected status %d, got %d", http.StatusOK, status)
	}

	if string(body) != "OK" {
		t.Errorf("Expected body %s, got %s", "OK", string(body))
	}

	ts = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte(`Bad Request`))
	}))

	status, body, err = httpClientRequest("GET", ts.URL, "/test", nil)
	if err == nil {
		t.Error("Expected error, got nil")
	}

	if status != http.StatusBadRequest {
		t.Errorf("Expected status %d, got %d", http.StatusBadRequest, status)
	}

	if !strings.Contains(err.Error(), "status code error") {
		t.Errorf("Expected 'status code error' in error message, got %s", err.Error())
	}
}
