// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
)

type Status struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func writeVoterResponse(w http.ResponseWriter, status Status) {
	w.Header().Set("Content-Type", "application/json")
	resp, err := json.Marshal(status)
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
	}
	w.Write(resp)
}

func TestWriteVoterResponse(t *testing.T) {
	tests := []struct {
		name           string
		status         Status
		expectedBody   string
		expectedHeader string
	}{
		{
			name:           "Success case",
			status:         Status{Message: "Vote recorded", Code: 200},
			expectedBody:   `{"message":"Vote recorded","code":200}`,
			expectedHeader: "application/json",
		},
		{
			name:           "Failure case",
			status:         Status{Message: "Failed to record vote", Code: 500},
			expectedBody:   `{"message":"Failed to record vote","code":500}`,
			expectedHeader: "application/json",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			recorder := httptest.NewRecorder()

			writeVoterResponse(recorder, tt.status)

			result := recorder.Result()
			body, _ := io.ReadAll(result.Body)
			defer result.Body.Close()

			if result.Header.Get("Content-Type") != tt.expectedHeader {
				t.Errorf("expected header %q, got %q", tt.expectedHeader, result.Header.Get("Content-Type"))
			}

			if string(body) != tt.expectedBody {
				t.Errorf("expected body %q, got %q", tt.expectedBody, string(body))
			}
		})
	}
}