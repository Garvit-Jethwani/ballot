// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-4

package main

import (
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
)

type Status struct {
	Code    int
	Message string
}

func writeVoterResponse(w http.ResponseWriter, status Status) {
	w.Header().Set("Content-Type", "application/json")
	resp, err := json.Marshal(status)
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
	}
	w.Write(resp)
}

func TestWriteVoterResponse_d4e306ce05(t *testing.T) {
	// Test case 1: Successful response
	t.Run("Successful response", func(t *testing.T) {
		status := Status{Code: 200, Message: "Success"}
		responseWriter := httptest.NewRecorder()

		writeVoterResponse(responseWriter, status)

		result := responseWriter.Result()
		if result.StatusCode != http.StatusOK {
			t.Errorf("Expected status code %d, got %d", http.StatusOK, result.StatusCode)
		}

		var respStatus Status
		json.NewDecoder(result.Body).Decode(&respStatus)
		if respStatus != status {
			t.Errorf("Expected status %v, got %v", status, respStatus)
		}
	})

	// Test case 2: Error in marshaling response
	t.Run("Error in marshaling response", func(t *testing.T) {
		status := Status{Code: 200, Message: string([]byte{128})}
		responseWriter := httptest.NewRecorder()

		writeVoterResponse(responseWriter, status)

		result := responseWriter.Result()
		var respStatus Status
		err := json.NewDecoder(result.Body).Decode(&respStatus)
		if err == nil {
			t.Errorf("Expected error in decoding response, got nil")
		}
	})
}
